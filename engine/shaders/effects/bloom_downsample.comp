#version 460

#include "common/common.inc"

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (push_constant) uniform constants
{
	int input_texture;
	int output_texture;
  vec2 input_texture_size;
  vec2 output_texture_size;
  float bloom_filter_radius;
} bloom_blur_constants;

// Adapted from https://learnopengl.com/Guest-Articles/2022/Phys.-Based-Bloom
// This shader performs downsampling on a texture,
// as taken from Call Of Duty method, presented at ACM Siggraph 2014.
// This particular method was customly designed to eliminate
// "pulsating artifacts and temporal stability issues".

void main()
{
  vec2 source_texel_size = 1.0f / bloom_blur_constants.input_texture_size;
  vec2 target_texel_size = 1.0f / bloom_blur_constants.output_texture_size;
  vec2 texture_coord = (vec2(gl_GlobalInvocationID.xy) + vec2(0.5f)) * target_texel_size;

  if (gl_GlobalInvocationID.x < bloom_blur_constants.output_texture_size.x
      && gl_GlobalInvocationID.y < bloom_blur_constants.output_texture_size.y)
  {
    // Take 13 samples around current texel:
    // a - b - c
    // - j - k -
    // d - e - f
    // - l - m -
    // g - h - i
    // === ('e' is the current texel) ===
    vec3 a = texture(
      textures_2D[nonuniformEXT(bloom_blur_constants.input_texture)],
      vec2(texture_coord.x - 2 * source_texel_size.x, texture_coord.y + 2 * source_texel_size.y)
    ).rgb;
    vec3 b = texture(
      textures_2D[nonuniformEXT(bloom_blur_constants.input_texture)],
      vec2(texture_coord.x,                           texture_coord.y + 2 * source_texel_size.y)
    ).rgb;
    vec3 c = texture(
      textures_2D[nonuniformEXT(bloom_blur_constants.input_texture)],
      vec2(texture_coord.x + 2 * source_texel_size.x, texture_coord.y + 2 * source_texel_size.y)
    ).rgb;

    vec3 d = texture(
      textures_2D[nonuniformEXT(bloom_blur_constants.input_texture)],
      vec2(texture_coord.x - 2 * source_texel_size.x, texture_coord.y)
    ).rgb;
    vec3 e = texture(
      textures_2D[nonuniformEXT(bloom_blur_constants.input_texture)],
      vec2(texture_coord.x,                           texture_coord.y)
    ).rgb;
    vec3 f = texture(
      textures_2D[nonuniformEXT(bloom_blur_constants.input_texture)],
      vec2(texture_coord.x + 2 * source_texel_size.x, texture_coord.y)
    ).rgb;

    vec3 g = texture(
      textures_2D[nonuniformEXT(bloom_blur_constants.input_texture)],
      vec2(texture_coord.x - 2 * source_texel_size.x, texture_coord.y - 2 * source_texel_size.y)
    ).rgb;
    vec3 h = texture(
      textures_2D[nonuniformEXT(bloom_blur_constants.input_texture)],
      vec2(texture_coord.x,                           texture_coord.y - 2 * source_texel_size.y)
    ).rgb;
    vec3 i = texture(
      textures_2D[nonuniformEXT(bloom_blur_constants.input_texture)],
      vec2(texture_coord.x + 2 * source_texel_size.x, texture_coord.y - 2 * source_texel_size.y)
    ).rgb;

    vec3 j = texture(
      textures_2D[nonuniformEXT(bloom_blur_constants.input_texture)],
      vec2(texture_coord.x - source_texel_size.x, texture_coord.y + source_texel_size.y)
    ).rgb;
    vec3 k = texture(
      textures_2D[nonuniformEXT(bloom_blur_constants.input_texture)],
      vec2(texture_coord.x + source_texel_size.x, texture_coord.y + source_texel_size.y)
    ).rgb;
    vec3 l = texture(
      textures_2D[nonuniformEXT(bloom_blur_constants.input_texture)],
      vec2(texture_coord.x - source_texel_size.x, texture_coord.y - source_texel_size.y)
    ).rgb;
    vec3 m = texture(
      textures_2D[nonuniformEXT(bloom_blur_constants.input_texture)],
      vec2(texture_coord.x + source_texel_size.x, texture_coord.y - source_texel_size.y)
    ).rgb;

    // Apply weighted distribution:
    // 0.5 + 0.125 + 0.125 + 0.125 + 0.125 = 1
    // a,b,d,e * 0.125
    // b,c,e,f * 0.125
    // d,e,g,h * 0.125
    // e,f,h,i * 0.125
    // j,k,l,m * 0.5
    // This shows 5 square areas that are being sampled. But some of them overlap,
    // so to have an energy preserving downsample we need to make some adjustments.
    // The weights are the distributed, so that the sum of j,k,l,m (e.g.)
    // contribute 0.5 to the final color output. The code below is written
    // to effectively yield this sum. We get:
    // 0.125*5 + 0.03125*4 + 0.0625*4 = 1

    vec3 downsample_color = e * 0.125;
    downsample_color += (a + c + g + i) * 0.03125;
    downsample_color += (b + d + f + h) * 0.0625;
    downsample_color += (j + k + l + m) * 0.125;
    downsample_color = max(downsample_color, 0.0001);

    imageStore(storage_2D[nonuniformEXT(bloom_blur_constants.output_texture)], ivec2(gl_GlobalInvocationID.xy), vec4(downsample_color, 1.0));
  }
}
