// Adapted from http://blog.simonrodriguez.fr/articles/2016/07/implementing_fxaa.html

#version 460

#include "common/common.inc"

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (push_constant) uniform constants
{
	int scene_color_texture;
	int out_scene_color_texture;
	float min_edge_threshold;
	float max_edge_threshold;
	vec2 resolution;
	vec2 inv_resolution;
	int max_iterations;
	vec3 padding;
} fxaa_constants;

float rgb_to_luma(vec3 rgb)
{
	return sqrt(dot(rgb, vec3(0.299, 0.587, 0.114)));
}

const float SUBPIXEL_QUALITY = 0.75;
const float ITERATION_QUALITY[6] = { 1.5, 2.0, 2.0, 2.0, 4.0, 8.0 };

#define QUALITY(i) ITERATION_QUALITY[i > 5 ? 5 : i]

void main()
{
	ivec2 texel_pos = ivec2(gl_GlobalInvocationID.xy);
	const vec2 screen_uv = nearest_uv(texel_pos, fxaa_constants.resolution);

	const vec4 color_center = texture(textures_2D[nonuniformEXT(fxaa_constants.scene_color_texture)], screen_uv);

	// Luma at the current fragment
	float luma_center = rgb_to_luma(color_center.rgb);

	// Luma at the four direct neighbours of the current fragment.
	float luma_down = rgb_to_luma(textureOffset(textures_2D[nonuniformEXT(fxaa_constants.scene_color_texture)], screen_uv, ivec2(0, -1)).rgb);
	float luma_up = rgb_to_luma(textureOffset(textures_2D[nonuniformEXT(fxaa_constants.scene_color_texture)], screen_uv, ivec2(0, 1)).rgb);
	float luma_left = rgb_to_luma(textureOffset(textures_2D[nonuniformEXT(fxaa_constants.scene_color_texture)], screen_uv, ivec2(-1, 0)).rgb);
	float luma_right = rgb_to_luma(textureOffset(textures_2D[nonuniformEXT(fxaa_constants.scene_color_texture)], screen_uv, ivec2(1, 0)).rgb);

	// Find the maximum and minimum luma around the current fragment.
	float luma_min = min(luma_center, min(min(luma_down, luma_up), min(luma_left, luma_right)));
	float luma_max = max(luma_center, max(max(luma_down, luma_up), max(luma_left, luma_right)));

	// Compute the delta.
	float luma_range = luma_max - luma_min;

	// If the luma variation is lower that a threshold (or if we are in a really dark area), we are not on an edge, don't perform any AA.
	if (luma_range < max(fxaa_constants.min_edge_threshold, luma_max * fxaa_constants.max_edge_threshold))
	{
		imageStore(storage_2D[nonuniformEXT(fxaa_constants.out_scene_color_texture)], texel_pos, color_center);
		return;
	}

	// Query the 4 remaining corners lumas.
	float luma_down_left = rgb_to_luma(textureOffset(textures_2D[nonuniformEXT(fxaa_constants.scene_color_texture)], screen_uv, ivec2(-1, -1)).rgb);
	float luma_up_right = rgb_to_luma(textureOffset(textures_2D[nonuniformEXT(fxaa_constants.scene_color_texture)], screen_uv, ivec2(1, 1)).rgb);
	float luma_up_left = rgb_to_luma(textureOffset(textures_2D[nonuniformEXT(fxaa_constants.scene_color_texture)], screen_uv, ivec2(-1, 1)).rgb);
	float luma_down_right = rgb_to_luma(textureOffset(textures_2D[nonuniformEXT(fxaa_constants.scene_color_texture)], screen_uv, ivec2(1, -1)).rgb);

	// Combine the four edges lumas (using intermediary variables for future computations with the same values).
	float luma_down_up = luma_down + luma_up;
	float luma_left_right = luma_left + luma_right;

	// Same for corners
	float luma_left_corners = luma_down_left + luma_up_left;
	float luma_down_corners = luma_down_left + luma_down_right;
	float luma_right_corners = luma_down_right + luma_up_right;
	float luma_up_corners = luma_up_right + luma_up_left;

	// Compute an estimation of the gradient along the horizontal and vertical axis.
	float edge_horizontal = abs(-2.0 * luma_left + luma_left_corners) + abs(-2.0 * luma_center + luma_down_up ) * 2.0 + abs(-2.0 * luma_right + luma_right_corners);
	float edge_vertical = abs(-2.0 * luma_up + luma_up_corners) + abs(-2.0 * luma_center + luma_left_right) * 2.0 + abs(-2.0 * luma_down + luma_down_corners);

	// Is the local edge horizontal or vertical ?
	bool is_horizontal = (edge_horizontal >= edge_vertical);

	// Select the two neighboring texels lumas in the opposite direction to the local edge.
	float luma1 = is_horizontal ? luma_down : luma_left;
	float luma2 = is_horizontal ? luma_up : luma_right;

	// Compute gradients in this direction.
	float gradient1 = luma1 - luma_center;
	float gradient2 = luma2 - luma_center;

	// Which direction is the steepest ?
	bool is_1_steepest = abs(gradient1) >= abs(gradient2);

	// Gradient in the corresponding direction, normalized.
	float gradient_scaled = 0.25 * max(abs(gradient1), abs(gradient2));

	// Choose the step size (one pixel) according to the edge direction.
	float step_length = is_horizontal ? fxaa_constants.inv_resolution.y : fxaa_constants.inv_resolution.x;

	// Average luma in the correct direction.
	float luma_local_average = 0.0;

	if (is_1_steepest)
	{
	    // Switch the direction
	    step_length = -step_length;
	    luma_local_average = 0.5 * (luma1 + luma_center);
	}
	else
	{
	    luma_local_average = 0.5 * (luma2 + luma_center);
	}

	// Shift UV in the correct direction by half a pixel.
	vec2 current_uv = screen_uv;
	if (is_horizontal)
	{
	    current_uv.y += step_length * 0.5;
	}
	else
	{
	    current_uv.x += step_length * 0.5;
	}

	// Compute offset (for each iteration step) in the right direction.
	vec2 offset = is_horizontal ? vec2(fxaa_constants.inv_resolution.x, 0.0) : vec2(0.0, fxaa_constants.inv_resolution.y);

	// Compute UVs to explore on each side of the edge, orthogonally. The QUALITY allows us to step faster.
	vec2 uv1 = current_uv - offset;
	vec2 uv2 = current_uv + offset;

	// Read the lumas at both current extremities of the exploration segment, and compute the delta wrt to the local average luma.
	float luma_end1 = rgb_to_luma(texture(textures_2D[nonuniformEXT(fxaa_constants.scene_color_texture)], uv1).rgb);
	float luma_end2 = rgb_to_luma(texture(textures_2D[nonuniformEXT(fxaa_constants.scene_color_texture)], uv2).rgb);
	luma_end1 -= luma_local_average;
	luma_end2 -= luma_local_average;

	// If the luma deltas at the current extremities are larger than the local gradient, we have reached the side of the edge.
	bool reached1 = abs(luma_end1) >= gradient_scaled;
	bool reached2 = abs(luma_end2) >= gradient_scaled;
	bool reached_both = reached1 && reached2;

	// If the side is not reached, we continue to explore in this direction.
	if (!reached1)
	{
	    uv1 -= offset;
	}
	if (!reached2)
	{
	    uv2 += offset;
	}

	// If both sides have not been reached, continue to explore.
	if(!reached_both)
	{
	    for (int i = 2; i < fxaa_constants.max_iterations; i++)
	    {
	        // If needed, read luma in 1st direction, compute delta.
	        if (!reached1)
	        {
	            luma_end1 = rgb_to_luma(texture(textures_2D[nonuniformEXT(fxaa_constants.scene_color_texture)], uv1).rgb);
	            luma_end1 = luma_end1 - luma_local_average;
	        }

	        // If needed, read luma in opposite direction, compute delta.
	        if (!reached2)
	        {
	            luma_end2 = rgb_to_luma(texture(textures_2D[nonuniformEXT(fxaa_constants.scene_color_texture)], uv2).rgb);
	            luma_end2 = luma_end2 - luma_local_average;
	        }

	        // If the luma deltas at the current extremities is larger than the local gradient, we have reached the side of the edge.
	        reached1 = abs(luma_end1) >= gradient_scaled;
	        reached2 = abs(luma_end2) >= gradient_scaled;
	        reached_both = reached1 && reached2;

	        // If the side is not reached, we continue to explore in this direction, with a variable quality.
	        if (!reached1)
	        {
	            uv1 -= offset * QUALITY(i);
	        }

	        if (!reached2)
	        {
	            uv2 += offset * QUALITY(i);
	        }

	        // If both sides have been reached, stop the exploration.
	        if (reached_both)
	        { 
	        	break;
	        }
	    }
	}

	// Compute the distances to each extremity of the edge.
	float distance1 = is_horizontal ? (screen_uv.x - uv1.x) : (screen_uv.y - uv1.y);
	float distance2 = is_horizontal ? (uv2.x - screen_uv.x) : (uv2.y - screen_uv.y);

	// In which direction is the extremity of the edge closer ?
	bool is_direction1 = distance1 < distance2;
	float distance_final = min(distance1, distance2);

	// Length of the edge.
	float edge_thickness = (distance1 + distance2);

	// UV offset: read in the direction of the closest side of the edge.
	float pixel_offset = -distance_final / edge_thickness + 0.5;

	// Is the luma at center smaller than the local average ?
	bool is_luma_center_smaller = luma_center < luma_local_average;

	// If the luma at center is smaller than at its neighbour, the delta luma at each end should be positive (same variation).
	// (in the direction of the closer side of the edge.)
	bool correct_variation = ((is_direction1 ? luma_end1 : luma_end2) < 0.0) != is_luma_center_smaller;

	// If the luma variation is incorrect, do not offset.
	float final_offset = correct_variation ? pixel_offset : 0.0;

	// Sub-pixel shifting
	// Full weighted average of the luma over the 3x3 neighborhood.
	float luma_average = (1.0 / 12.0) * (2.0 * (luma_down_up + luma_left_right) + luma_left_corners + luma_right_corners);

	// Ratio of the delta between the global average and the center luma, over the luma range in the 3x3 neighborhood.
	float sub_pixel_offset1 = clamp(abs(luma_average - luma_center) / luma_range, 0.0, 1.0);
	float sub_pixel_offset2 = (-2.0 * sub_pixel_offset1 + 3.0) * sub_pixel_offset1 * sub_pixel_offset1;

	// Compute a sub-pixel offset based on this delta.
	float sub_pixel_offset_final = sub_pixel_offset2 * sub_pixel_offset2 * SUBPIXEL_QUALITY;

	// Pick the biggest of the two offsets.
	final_offset = max(final_offset, sub_pixel_offset_final);

	// Compute the final UV coordinates.
	vec2 final_uv = screen_uv;
	if (is_horizontal)
	{
    	final_uv.y += final_offset * step_length;
	}
	else
	{
	    final_uv.x += final_offset * step_length;
	}

	// Read the color at the new UV coordinates, and use it.
	vec3 final_color = texture(textures_2D[nonuniformEXT(fxaa_constants.scene_color_texture)], final_uv).rgb;

	imageStore(storage_2D[nonuniformEXT(fxaa_constants.out_scene_color_texture)], texel_pos, vec4(final_color, 1.0f));
}
