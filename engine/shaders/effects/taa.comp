// Adapted from Mastering Graphics Programming with Vulkan
// https://github.com/PacktPublishing/Mastering-Graphics-Programming-with-Vulkan

#version 460

#include "common/common.inc"

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (push_constant) uniform constants
{
	int scene_color_texture;
	int history_color_texture;
	int motion_vector_texture;
	int depth_texture;
	int out_scene_color_texture;
	int out_history_color_texture;
	int inverse_luminance_filter_enabled;
	int luminance_difference_filter_enabled;
	vec2 resolution;
	vec2 padding;
} temporal_aa_constants;

void closest_fragment_3x3(ivec2 pixel_pos, out ivec2 closest_pos, out float closest_depth)
{
	closest_depth = 1.0f;
	closest_pos = ivec2(0, 0);

	for (int x = -1; x <= 1; ++x)
	{
		for (int y = -1; y <= 1; ++y)
		{
			ivec2 offset_pixel_pos = pixel_pos + ivec2(x, y);
			offset_pixel_pos = clamp(offset_pixel_pos, ivec2(0, 0), ivec2(temporal_aa_constants.resolution.x - 1, temporal_aa_constants.resolution.y - 1));
			float depth = texelFetch(textures_2D[nonuniformEXT(temporal_aa_constants.depth_texture)], offset_pixel_pos, 0).r;
			if (depth < closest_depth)
			{
				closest_depth = depth;
				closest_pos = offset_pixel_pos;
			}
		}
	}
}

// Optimized clip aabb function from Inside.
// https://www.youtube.com/watch?v=2XXS5UyNjjU&ab_channel=GDC
vec4 clip_aabb(vec3 aabb_min, vec3 aabb_max, vec4 previous_sample, float average_alpha)
{
    // note: only clips towards aabb center (but fast!)
    vec3 p_clip = 0.5 * (aabb_max + aabb_min);
    vec3 e_clip = 0.5 * (aabb_max - aabb_min) + 0.000000001f;

    vec4 v_clip = previous_sample - vec4(p_clip, average_alpha);
    vec3 v_unit = v_clip.xyz / e_clip;
    vec3 a_unit = abs(v_unit);
    float ma_unit = max(a_unit.x, max(a_unit.y, a_unit.z));

    if (ma_unit > 1.0)
    {
        return vec4(p_clip, average_alpha) + v_clip / ma_unit;
    }
    else
    {
        // point inside aabb
        return previous_sample;
    }
}

void main()
{
	ivec2 texel_pos = ivec2(gl_GlobalInvocationID.xy);

	// Find the closest fragment in a 3x3 texel area based on depth, and use that to sample our motion vector image
	// in order to reproject and sample our history color
	float closest_depth = 1.0f;
	ivec2 closest_pos = ivec2(0, 0);
	closest_fragment_3x3(texel_pos, closest_pos, closest_depth);

	const vec2 velocity = texelFetch(textures_2D[nonuniformEXT(temporal_aa_constants.motion_vector_texture)], closest_pos, 0).rg;
	const vec2 screen_uv = nearest_uv(texel_pos, temporal_aa_constants.resolution);
	const vec2 reprojected_uv = screen_uv - velocity;

	// Use 9-tap Catmull-Rom filter to sample the history color
	vec3 history_color = texture_catmull_rom(reprojected_uv, temporal_aa_constants.history_color_texture, temporal_aa_constants.resolution);

	// Use another 3x3 texel lookup and collect color data for the history contraint
	vec3 current_sample_total = vec3(0.0f);
	float current_sample_weight = 0.0f;
	vec3 neighborhood_min = vec3(10000.0f);
	vec3 neighborhood_max = vec3(-10000.0f);
	vec3 moment1 = vec3(0.0f);
	vec3 moment2 = vec3(0.0f);

	for (int x = -1; x <= 1; ++x)
	{
		for (int y = -1; y <= 1; ++y)
		{
			ivec2 pixel_position = texel_pos + ivec2(x, y);
			pixel_position = clamp(pixel_position, ivec2(0.0f, 0.0f), ivec2(temporal_aa_constants.resolution.x - 1, temporal_aa_constants.resolution.y - 1));

			vec3 current_sample = texelFetch(textures_2D[nonuniformEXT(temporal_aa_constants.scene_color_texture)], pixel_position, 0).rgb;

			float subsample_distance = length(vec2(x * 1.0f, y * 1.0f));
			float subsample_weight = catmull_rom_filter(subsample_distance * 2.0f);

			current_sample_total += current_sample * subsample_weight;
			current_sample_weight += subsample_weight;

			neighborhood_min = min(neighborhood_min, current_sample);
			neighborhood_max = max(neighborhood_max, current_sample);

			moment1 += current_sample;
			moment2 += current_sample * current_sample;
		}
	}

	vec3 current_sample = current_sample_total / current_sample_weight;

	// History constraint
	{
		// Calculate color aabb using moments 1 and 2 to do history clipping
		float rcp_sample_count = 1.0f / 9.0f;
		float gamma = 1.0f;
		vec3 mu = moment1 * rcp_sample_count;
		vec3 sigma = sqrt(abs((moment2 * rcp_sample_count) - (mu * mu)));
		vec3 min_c = mu - gamma * sigma;
		vec3 max_c = mu + gamma * sigma;

		// Clamp history color to new aabb
		vec3 clamped_history_color = clamp(history_color.rgb, neighborhood_min, neighborhood_max);
		history_color.rgb = clip_aabb(min_c, max_c, vec4(clamped_history_color, 1.0f), 1.0f).rgb;
	}

	// Resolve color by combining history with current scene color
	vec3 current_weight = vec3(0.1f);
	vec3 history_weight = vec3(1.0f - current_weight);

	// Temporal filtering
	{
		vec3 temporal_weight = clamp(abs(neighborhood_max - neighborhood_min) / current_sample, vec3(0), vec3(1));
		history_weight = clamp(mix(vec3(0.25f), vec3(0.95f), temporal_weight), vec3(0), vec3(1));
		current_weight = 1.0f - history_weight;
	}

	// Inverse luminance filtering
	if (temporal_aa_constants.inverse_luminance_filter_enabled > 0)
	{
		vec3 compressed_source = current_sample / (max(max(current_sample.r, current_sample.g), current_sample.b) + 1.0f);
		vec3 compressed_history = history_color / (max(max(history_color.r, history_color.g), history_color.b) + 1.0f);
		float luminance_source = luminance(compressed_source);
		float luminance_history = luminance(compressed_history);

		// Luminance difference filtering
		if (temporal_aa_constants.luminance_difference_filter_enabled > 0)
		{
			float unbiased_diff = abs(luminance_source - luminance_history) / max(luminance_source, max(luminance_history, 0.2f));
			float unbiased_weight = 1.0f - unbiased_diff;
			float unbiased_weight_sqr = unbiased_weight * unbiased_weight;
			float k_feedback = mix(0.0f, 1.0f, unbiased_weight_sqr);
			history_weight = vec3(1.0f - k_feedback);
			current_weight = vec3(k_feedback);
		}

		current_weight *= 1.0f / (1.0f + luminance_source);
		history_weight *= 1.0f / (1.0f + luminance_history);
	}

	vec3 new_color = (current_sample * current_weight + history_color * history_weight) / max(current_weight + history_weight, 0.00001f);

	imageStore(storage_2D[nonuniformEXT(temporal_aa_constants.out_scene_color_texture)], texel_pos, vec4(new_color, 1.0f));
	imageStore(storage_2D[nonuniformEXT(temporal_aa_constants.out_history_color_texture)], texel_pos, vec4(new_color, 1.0f));
}
